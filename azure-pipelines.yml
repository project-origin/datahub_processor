trigger:
  branches:
    include:
    - master
    - test
    - develop

# no PR triggers
pr: none

resources:
- repo: self

variables:
  imageName: 'projectorigin/ledger_tp'
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    kubeCon: 'kubecon-eloprindelse-prod'
    tag: '$(Build.BuildId)'
    namespace: 'eloprindelse'
  ${{ if eq(variables['Build.SourceBranchName'], 'test') }}:
    kubeCon: 'test-kube-con'
    tag: '$(Build.BuildId)'
    namespace: 'test-project-origin'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    kubeCon: 'dev-kube-con'
    tag: 'dev.$(Build.BuildId)'
    namespace: 'dev-project-origin'

jobs:  
  - job: build_deploy
    displayName: Build and Deploy
    pool:
      ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
        name: eloprindelse-prod
      ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
        vmImage: 'ubuntu-latest'

    steps:

      - script: git submodule update --init --recursive
        displayName: Git get submodules

      - script: sudo mkdir /etc/sawtooth && sudo chmod 777 /etc/sawtooth &&
                sudo mkdir /var/lib/sawtooth && sudo chmod 777 /var/lib/sawtooth &&
                sudo mkdir /var/log/sawtooth && sudo chmod 777 /var/log/sawtooth
        displayName: Create sawtooth folders

      - script: sudo apt update
        displayName: Update repo

      - script: sudo apt install -y pkg-config gcc libsecp256k1-dev libzmq3-dev
        displayName: Install packages

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'

      - script: python -m pip install -r requirements.txt
        displayName: 'Install requirements'

      - script: pytest -m unittest --cov-report=term-missing --cov-fail-under=100 --cov=src/datahub_processor
        displayName: 'Run tests'

      - script: git submodule update --init --recursive
        displayName: Git get submodules

      - task: Docker@2
        displayName: Build docker image
        inputs:
          command: build
          repository: $(imageName)
          Dockerfile: Dockerfile
          tags: |
            latest
            $(tag)

      - task: Docker@2
        displayName: Push image
        inputs:
          command: push
          repository: $(imageName)
          containerRegistry: dockerHub
          tags: |
            latest
            $(tag)

      - task: HelmDeploy@0
        displayName: Helm uninstall
        continueOnError: true
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: $(kubeCon)
          namespace: $(namespace)
          command: uninstall
          arguments: ledger-tp
          waitForExecution: true
          
      - task: HelmDeploy@0
        displayName: Helm upgrade
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: $(kubeCon)
          namespace: $(namespace)
          command: upgrade
          chartType: filepath
          chartPath: ./chart
          releaseName: ledger-tp
          overrideValues: tag=$(tag)
          install: true
          waitForExecution: true