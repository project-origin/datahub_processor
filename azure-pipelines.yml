trigger:
  branches:
    include:
    - master
    - test
    - develop

# no PR triggers
pr: none

resources:
- repo: self

variables:
  releaseName: 'ledger-tp'
  imageName: 'projectorigin/$(releaseName)'

  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    kubeCon: 'prod-kube-con'
    namespace: 'project-origin'
    tag: ''
  ${{ if eq(variables['Build.SourceBranchName'], 'test') }}:
    kubeCon: 'test-kube-con'
    namespace: 'test-project-origin'
    tag: 'rc-'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    kubeCon: 'dev-kube-con'
    namespace: 'dev-project-origin'
    tag: 'canary-'

pool:
  vmImage: 'ubuntu-latest'

jobs:  
  - job: test
    displayName: Test
    steps:
      - script: git submodule update --init --recursive
        displayName: Git get submodules
        
      - script: echo "##vso[task.setvariable variable=tag]$(tag)$(git describe --tags --long | sed '0,/-/s/-/./')"
        displayName: Append tag with git describe

      - script: sudo mkdir -p /etc/sawtooth && sudo chmod 777 /etc/sawtooth &&
                sudo mkdir -p /var/lib/sawtooth && sudo chmod 777 /var/lib/sawtooth &&
                sudo mkdir -p /var/log/sawtooth && sudo chmod 777 /var/log/sawtooth
        displayName: Create sawtooth folders

      - script: sudo apt update
        displayName: Update repo

      - script: sudo apt install -y pkg-config gcc libsecp256k1-dev libzmq3-dev
        displayName: Install packages

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'

      - script: python -m pip install -r requirements.txt
        displayName: 'Install requirements'

      - script: pytest -m unittest --cov-report=term-missing --cov-fail-under=100 --cov=src/datahub_processor
        displayName: 'Run tests'


  - job: build_and_release
    displayName: Build and Release
    dependsOn: test
    condition: succeeded()
    steps:
      - script: git submodule update --init --recursive
        displayName: Git get submodules

      - script: echo "##vso[task.setvariable variable=tag]$(tag)$(git describe --tags --long | sed '0,/-/s/-/./')"
        displayName: Append tag with git describe
      
      - task: Docker@2
        displayName: Build docker image
        inputs:
          command: build
          repository: $(imageName)
          Dockerfile: Dockerfile
          tags: $(tag)
      
      - task: Docker@2
        displayName: Build docker latest image
        condition: eq(variables['Build.SourceBranchName'], 'master')
        inputs:
          command: build
          repository: $(imageName)
          Dockerfile: Dockerfile
          tags: latest

      - task: Docker@2
        displayName: Push image
        inputs:
          command: push
          repository: $(imageName)
          containerRegistry: dockerHub
          tags: $(tag)

      - task: Docker@2
        displayName: Push latest image
        condition: eq(variables['Build.SourceBranchName'], 'master')
        inputs:
          command: push
          repository: $(imageName)
          containerRegistry: dockerHub
          tags: latest


  - job: deploy
    displayName: Deploy
    pool:
      ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
        name: eloprindelse-prod
      ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
        vmImage: 'ubuntu-latest'
    dependsOn: build_and_release
    condition: succeeded()
    steps:
      - script: echo "##vso[task.setvariable variable=tag]$(tag)$(git describe --tags --long | sed '0,/-/s/-/./')"
        displayName: Append tag with git describe

      - task: HelmDeploy@0
        displayName: Helm upgrade
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: $(kubeCon)
          namespace: $(namespace)
          command: upgrade
          chartType: filepath
          chartPath: ./chart
          releaseName: $(releaseName)
          overrideValues: tag=$(tag)
          install: true
          waitForExecution: true

  - job: rollback
    displayName: Rollback
    pool:
      ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
        name: eloprindelse-prod
      ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
        vmImage: 'ubuntu-latest'
    dependsOn: deploy
    condition: and(failed('deploy'), ne(variables['Build.SourceBranchName'], 'develop'))
    steps:
      - task: HelmDeploy@0
        displayName: Helm rollback
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceConnection: $(kubeCon)
          namespace: $(namespace)
          command: rollback
          arguments: $(releaseName)
          waitForExecution: true
